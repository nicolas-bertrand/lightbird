#ifndef ENGINE_H
# define ENGINE_H

# include <QByteArray>
# include <QObject>
# include <QStringList>

# include "Client.h"
# include "Request.h"
# include "Response.h"

/// @brief
class Engine : public QObject
{
    Q_OBJECT

public:
    Engine(Client &client, QObject *parent = 0);
    virtual ~Engine();

    /// @brief This method is called each time new data are available for the Engine.
    /// @param data : The data to process.
    virtual void    read(QByteArray &data) = 0;
    /// @brief Tells if the Engine is processing a request.
    virtual bool    isRunning() = 0;
    /// @brief Returns the request currently executing by the Engine.
    virtual LightBird::IRequest  &getRequest() = 0;
    /// @brief Returns the response currently generated by the Engine.
    virtual LightBird::IResponse &getResponse() = 0;
    /// @brief Prepare the Engine so that is can be used to execute an other request.
    void    clear();

protected:
    Engine(const Engine &context);
    Engine &operator=(const Engine &context);

    /// @brief List the possible states of the unserialization.
    enum State
    {
        READY,      ///< The engine is ready to process a new request
        HEADER,     ///< Unserializing the header of the request
        CONTENT,    ///< Unserializing the content of the request
        FOOTER      ///< Unserializing the footer of the request
    };

    Client          &client;        ///< The client for which the engine is running.
    QByteArray      data;           ///< The raw data sent by the client, and that will be unserialized to the request.
    Request         request;        ///< The request sent by the client.
    Response        response;       ///< The response generated.
    Engine::State   state;          ///< The current state of the unserialization.
    bool            running;        ///< If the Engine is execution a request.
    bool            done;           ///< True if at least one plugin has implementes one of the IDoUnserialize or the IDoSerialize interfaces.
    bool            needResponse;   ///< If the request of the client needs a response.
    QStringList     protocolUnknow; ///< List the plugins that doesn't know the protocol of the request.
};

#endif // ENGINE_H
