#include <QCryptographicHash>
#include <QDir>
#include <QFileInfo>
#include <QUrl>
#include <QUuid>

#include "IIdentifier.h"
#include "ITableFiles.h"
#include "ITableTags.h"

#include "Audio.h"
#include "Execute.h"
#include "LightBird.h"
#include "Medias.h"
#include "Plugin.h"
#include "Preview.h"
#include "Uploads.h"

Execute::Execute(LightBird::IApi &a, LightBird::IClient &c, const QString &com) :
         api(a), client(c), request(c.getRequest()), response(c.getResponse())
{
    QString command = com;

    // Get the command
    if (command.contains("."))
        command = command.left(command.indexOf("."));
    // The client is not connected and it doesn't tries to identify
    if ((!client.getAccount().exists() || request.getUri().queryItemValue("token").isEmpty()) && command != "Identify")
    {
        Plugin::response(this->client, 403, "Forbidden");
        return ;
    }
    // Initialize the list of the available commands
    commands["Audio"] = &Execute::_audio;
    commands["Disconnect"] = &Execute::_disconnect;
    commands["Identify"] = &Execute::_identify;
    commands["Preview"] = &Execute::_preview;
    commands["Select"] = &Execute::_select;
    commands["Uploads"] = &Execute::_uploads;
    commands["UploadsCheck"] = &Execute::_uploadsCheck;
    commands["UploadsProgress"] = &Execute::_uploadsProgress;
    commands["UploadsStop"] = &Execute::_uploadsStop;
    commands["UploadsCancel"] = &Execute::_uploadsCancel;
    commands["StopStream"] = &Execute::_stopStream;
    commands["Video"] = &Execute::_video;
    commands["DeleteFile"] = &Execute::_deleteFile;
    // Execute the command
    if (commands.contains(command))
        (this->*(this->commands[command]))();
    // The command is unknow
    else
        Plugin::response(this->client, 404, "Not Found");
}

Execute::~Execute()
{
}

void        Execute::_audio()
{
    Medias::getInstance().start(this->client, false);
}

void        Execute::_disconnect()
{
    // Destroy the cookies
    this->response.getHeader().remove("set-cookie");
    this->response.getHeader().insertMulti("set-cookie", "sid=; path=/");
    // The session will be destroyed in IOnFinish, because the new cookies
    // have to be send to the browser before the client is disconnected
    client.getInformations()["disconnect"] = true;
}

void                        Execute::_identify()
{
    LightBird::Session      session;
    QString                 salt;
    QString                 name;
    QString                 id;
    QString                 token;
    QSqlQuery               query;
    QVector<QVariantMap>    result;
    int                     i = 0;
    int                     s;
    QString                 sid;

    // If too many identification failed attempts has been done
    if (!Plugin::getInstance().identificationAllowed(this->client))
        return Plugin::response(client, 403, "Forbidden");
    // The client is asking the id of the account and a session id, in order to
    // generate the identifiant : SHA-256(name + SHA-256(password + aid) + sid)
    if (!(name = this->request.getUri().queryItemValue("name")).isEmpty() &&
        (salt = this->request.getUri().queryItemValue("salt")).size() >= 32)
    {
        // Search the id of the account using the salt and its name
        LightBird::IDatabase &database = this->api.database();
        query.prepare(database.getQuery("HttpClient", "select_all_accounts"));
        if (database.query(query, result))
            for (i = 0, s = result.size(); i < s && id.isEmpty(); ++i)
                if (name == LightBird::sha256(result[i]["name"].toByteArray() + salt.toAscii()))
                {
                    id = result[i]["id"].toString();
                    break;
                }
        this->response.getHeader().remove("set-cookie");
        // The account has been found
        if (!id.isEmpty())
        {
            // Create a new session. The client has 30 seconds to generate the identifiant.
            session = this->api.sessions().create(QDateTime::currentDateTime().addSecs(30), id, QStringList() << client.getId());
            // Compute the identifiant of the client
            session->setInformation("identifiant", LightBird::sha256(result[i]["name"].toByteArray() + result[i]["password"].toByteArray() + session->getId().toAscii()));
            Plugin::addCookie(client, "sid", session->getId());
            // Return the id of the account, which is the salt of the password
            this->response.getContent().setContent(id.toAscii());
        }
        // Otherwise we return a fake salt and sid (the user shouldn't know that the name doesn't exists).
        else
        {
            Plugin::addCookie(client, "sid", LightBird::createUuid());
            this->response.getContent().setContent(LightBird::createUuid().toAscii());
            Plugin::getInstance().identificationFailed(client);
        }
    }
    // Try to identiy the user using the identifiant generated by the client
    else if (!(token = this->request.getUri().queryItemValue("token")).isEmpty() &&
             !(sid = Plugin::getCookie(client, "sid")).isEmpty() &&
             !(session = this->api.sessions().getSession(sid)).isNull() &&
             !this->response.isError() &&
             client.getAccount().setId(session->getAccount()) &&
             client.getAccount().isActive())
    {
        session->setAccount(client.getAccount().getId());
        session->setExpiration(QDateTime::currentDateTime().addMonths(1));
    }
    // The identification failed
    else
    {
        Plugin::response(client, 403, "Forbidden");
        client.getResponse().getHeader().remove("set-cookie");
        Plugin::addCookie(client, "sid");
        client.getAccount().clear();
        if (!session.isNull())
            session->destroy();
    }
}

void        Execute::_preview()
{
    Preview preview(this->api, this->client);
    preview.go();
}

void        Execute::_select()
{
    QSharedPointer<LightBird::ITableFiles>  file(this->api.database().getFiles());
    QSqlQuery                               query;
    QVector<QVariantMap>                    result;
    int                                     s = 0;
    QVariantMap                             row;
    QList<QVariant>                         rows;

    query.prepare(this->api.database().getQuery("HttpClient", "select_all_files"));
    if (!this->api.database().query(query, result))
        return Plugin::response(this->client, 500, "Internal Server Error");
    s = s;
    for (int i = 0, s = result.size(); i < s; ++i)
    {
        file->setId(result[i]["id"].toString());
        row = file->getInformations();
        row.unite(result[i]);
        rows.push_back(row);
    }
    this->response.getContent().setStorage(LightBird::IContent::VARIANT);
    *this->response.getContent().getVariant() = rows;
    this->response.setType("application/json");
}

void        Execute::_uploads()
{
    Plugin::getInstance().getUploads().doExecution(this->client);
}

void        Execute::_uploadsCheck()
{
    Plugin::getInstance().getUploads().check(this->client);
}

void        Execute::_uploadsProgress()
{
    Plugin::getInstance().getUploads().progress(this->client);
}

void        Execute::_uploadsStop()
{
    Plugin::getInstance().getUploads().stop(this->client);
}

void        Execute::_uploadsCancel()
{
    Plugin::getInstance().getUploads().cancel(this->client);
}

void        Execute::_stopStream()
{
    Medias::getInstance().stop(client);
}

void        Execute::_video()
{
    Medias::getInstance().start(this->client, true);
}

void    Execute::_deleteFile()
{
    QSharedPointer<LightBird::ITableFiles> file(this->api.database().getFiles(request.getUri().queryItemValue("id")));

    if (file->exists())
    {
        if (file->isAllowed(this->client.getAccount().getId(), "delete"))
        {
            QString path = file->getFullPath();
            file->remove();
            QFile::remove(path);
        }
        else
            Plugin::response(this->client, 403, "Forbidden");
    }
    else
        Plugin::response(this->client, 404, "Not Found");
}
