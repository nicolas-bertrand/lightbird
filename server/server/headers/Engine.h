#ifndef ENGINE_H
# define ENGINE_H

# include <QByteArray>
# include <QObject>
# include <QStringList>

# include "IOnSerialize.h"
# include "IOnUnserialize.h"

# include "Client.h"
# include "Request.h"
# include "Response.h"

/// @brief Interface inherited by all the engines.
class Engine : public QObject
{
    Q_OBJECT

public:
    Engine(Client &client);
    virtual ~Engine();

    /// @brief This method is called each time new data are available for the Engine.
    /// @param data : The data to process.
    void            read(const QList<QByteArray *> &data);
    /// @brief Run the engine. Process the data stored in this->data, of sent a
    /// new request/response.
    /// @return True while there is enough data to run the engine, and the client
    /// is still connected to the server.
    virtual bool    run() = 0;
    /// @brief Returns the request currently executing by the Engine.
    LightBird::IRequest  &getRequest();
    /// @brief Returns the response currently generated by the Engine.
    LightBird::IResponse &getResponse();
    /// @brief Returns true if the engine has just been cleared and is not running.
    virtual bool    isIdle() = 0;

protected:
    Engine(const Engine &);
    Engine &operator=(const Engine &);

    /// @brief Prepares the Engine to execute an other request.
    virtual void    _clear();
    /// @brief Calls LightBird::IOnRead.
    void            _onRead(QByteArray &data);
    /// @brief Calls LightBird::IOnWrite.
    void            _onWrite(QByteArray &data);
    /// @brief Calls LightBird::IOnUnserialize.
    void            _onUnserialize(LightBird::IOnUnserialize::Unserialize type);
    /// @brief Calls LightBird::IOnSerialize.
    bool            _onSerialize(LightBird::IOnSerialize::Serialize type);

    Client          &client;  ///< The client for which the engine is running.
    QByteArray      data;     ///< The raw data received from a client, waiting to be unserialized.
    Request         request;  ///< The request.
    Response        response; ///< The response.
    bool            done;     ///< True if at least one plugin has implemented one of the IDoUnserialize or the IDoSerialize interfaces.
};

#endif // ENGINE_H
